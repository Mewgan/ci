<project name="Installer une application" basedir="." xmlns:git="antlib:com.rimerosolutions.ant.git">

	<target name="capistrano" depends="build-db">
		<exec executable="cap" dir="." failonerror="true">
			<arg value="${CAP_FILE}" />
			<arg value="deploy" />
		</exec>
	</target>

	<target name="deploy" depends="build-db">
		<copy todir="work" overwrite="true">
			<fileset dir="${dir.application}" excludes="${files.excludes}" />
		</copy>
		<exec executable="scp" dir="." failonerror="true">
			<arg value="-r" />
			<arg value="work" />
			<arg value="${server.application}" />
		</exec>
		<delete dir="work" />
	</target>

	<target name="run-test" depends="build-db">
		<exec executable="./vendor/bin/phpunit" dir="." failonerror="true">
		</exec>
		<exec executable="npm" dir="." failonerror="true">
			<arg value="run" />
			<arg value="test" />
		</exec>
	</target>

	<target name="build-db" depends="build-app">
		<if>
			<equals arg1="${ACTION}" arg2="install" />
			<then>
				<exec executable="php" dir="." failonerror="true">
					<arg value="jet" />
					<arg value="orm:schema-tool:drop" />
					<arg value="--force" />
				</exec>
			</then>
		</if>
		<exec executable="php" dir="." failonerror="true">
			<arg value="jet" />
			<arg value="migrations:migrate" />
			<arg value="--no-interaction" />
		</exec>
		<for param="fixture" list="${list_fixtures_folder}" delimiter=",">
			<sequential>
				<exec executable="php" dir="." failonerror="true">
					<arg value="jet" />
					<arg value="load:data" />
					<arg value="--fixtures=@{fixture}" />
					<arg value="--append" />
				</exec>
			</sequential>
		</for>
	</target>

	<target name="build-app" depends="install-libs">
		<exec executable="npm" dir="." failonerror="true">
			<arg value="run" />
			<arg value="build" />
			<arg value="--base=webpack.admin" />
		</exec>
	</target>

	<target name="install-libs" depends="install-modules">
		<if>
			<equals arg1="${ENV}" arg2="prod" />
			<then>
				<exec executable="composer" dir="." failonerror="true">
					<arg value="install" />
					<arg value="--no-dev" />
				</exec>
				<exec executable="npm" dir="." failonerror="true">
					<arg value="install" />
					<arg value="--production" />
				</exec>
			</then>
			<else>
				<exec executable="composer" dir="." failonerror="true">
					<arg value="install" />
				</exec>
				<exec executable="npm" dir="." failonerror="true">
					<arg value="install" />
				</exec>
			</else>
		</if>
	</target>

	<target name="install-modules" depends="config">
		<property file="install_auto.properties" />

		<mkdir dir="${dir.modules}" />
		<for param="module" list="${list_modules_url}" delimiter=",">
			<sequential>
				<git-clone dir="${dir.modules}/@{module}" uri="${@{module}}" />
			</sequential>
		</for>
	</target>

	<target name="config" depends="install-application">
		<for param="file" list="${list_file_to_configure}" delimiter=",">
			<sequential>
				<echo message="Fichier a configurer : @{file}" />
				<for param="prop" list="${list_prop_to_configure}" delimiter=",">
					<sequential>
						<echo message="@{prop}" />
						<replace file="${dir.application}/@{file}" value="">
							<replacefilter token="{{@{prop}}}" value="${@{prop}}" />
						</replace>
					</sequential>
				</for>
				<basename property="filename" file="$(file}" suffix=".sample"/>
				<rename src="${file}" dest="filename" />
			</sequential>
		</for>
	</target>

	<target name="install-application" depends="init">
		<git-clone dir="${dir.application}" uri="${git.project.uri}" />
	</target>

	<target name="init">
		<mkdir dir="${dir.application}" />
		<git:settings refId="git.settings" username="${git.username}" password="${git.password}" name="${git.name}" email="${git.email}" />
	</target>

	<macrodef name="git-clone">
		<attribute name="dir" />
		<attribute name="uri" />
		<sequential>
			<condition property="is_git_not_cloned">
				<not>
					<available file="@{dir}/.git/" type="dir" />
				</not>
			</condition>

			<if>
				<equals arg1="${is_git_not_cloned}" arg2="true" />
				<then>
					<echo message="git-clone-checkout" />
					<git:git directory="@{dir}" settingsRef="git.settings">
						<clone uri="@{uri}" cloneallbranches="false" branchnames="origin/${git.branch}" branchtotrack="origin/${git.branch}" nocheckout="true" clonesubmodules="false" />
					</git:git>
					<git:git directory="@{dir}" settingsRef="git.settings">
						<fetch uri="@{uri}" />
						<checkout branchname="origin/${git.branch}" />
					</git:git>
				</then>
				<else>
					<exec executable="git" dir="@{dir}" failonerror="true">
						<arg value="pull" />
					</exec>
				</else>
			</if>
		</sequential>
	</macrodef>

	<typedef resource="net/sf/antcontrib/antlib.xml">
		<classpath>
			<fileset dir="lib">
				<include name="ant-contrib*.jar" />
			</fileset>
		</classpath>
	</typedef>
	<taskdef uri="antlib:com.rimerosolutions.ant.git" resource="com/rimerosolutions/ant/git/jgit-ant-lib.xml">
		<classpath>
			<fileset dir="lib">
				<include name="*.jar" />
			</fileset>
		</classpath>
	</taskdef>
	<property file="install_auto.properties" />

</project>